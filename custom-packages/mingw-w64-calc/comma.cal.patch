diff -pur calc-2.14.1.0.orig/cal/comma.cal calc/cal/comma.cal
--- calc-2.14.1.0.orig/cal/comma.cal	1970-01-01 01:00:00.000000000 +0100
+++ calc/cal/comma.cal	2022-11-01 20:25:25.369123000 +0100
@@ -0,0 +1,437 @@
+/*
+ * comma - convert numbers into strings with 3-digit group and integer-fraction separators
+ *
+ * Convert numbers into strings with 3-digit group and integer-fraction separators.
+ *
+ * If the value is an integer, the integer-fraction separator is not used.
+ *
+ * str_comma(x, [group, [decimal]])
+ *
+ *	Convert x into a string.
+ *
+ *	If group is given and is a string, group will be used as
+ *	the 3-digit group separator, otherwise the default 3-digit
+ *	group separator will be used.
+ *
+ *	If decimal is given and is a string, group will be used as
+ *	the integer-fraction separator, otherwise the default
+ *	integer-fraction separator will be used.
+ *
+ *	The decimal and group arguments are optional.
+ *
+ * set_default_group_separator(group)
+ *
+ *	Change the default 3-digit group separator if group is a string,
+ *	otherwise the default 3-digit group separator will not be
+ *	changed.  Return the old 3-digit group separator.
+ *
+ * set_default_decimal_separator(decimal)
+ *
+ *	Change the default 3-digit group separator if decimal is a
+ *	string, otherwise the default integer-fraction separator
+ *	will not be changed.  Return the old integer-fraction separator.
+ *
+ * print_comma(x, [group, [decimal]])
+ *
+ *	Print the value produced by str_comma(x, [group, [decimal]])
+ *	followed by a newline.
+ *
+ *	If the str_comma() does not return a string, nothing is printed.
+ *
+ *	The decimal and group arguments are optional.
+ *
+ *	The value produced by str_comma() is returned.
+ *
+ * fprint_comma(fd, x, [group, [decimal]])
+ *
+ *	Print the value produced by str_comma(x, [group, [decimal]]),
+ *	without a trailing newline, on file fd.
+ *
+ *	If the str_comma() does not return a string, nothing is printed.
+ *
+ *	If fd is not an open file, nothing is printed.
+ *
+ *	The decimal and group arguments are optional.
+ *
+ *	The value produced by str_comma() is returned.
+ *
+ * Copyright (C) 2022  Landon Curt Noll
+ *
+ * Calc is open software; you can redistribute it and/or modify it under
+ * the terms of the version 2.1 of the GNU Lesser General Public License
+ * as published by the Free Software Foundation.
+ *
+ * Calc is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General
+ * Public License for more details.
+ *
+ * A copy of version 2.1 of the GNU Lesser General Public License is
+ * distributed with calc under the filename COPYING-LGPL.  You should have
+ * received a copy with calc; if not, write to Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ *
+ * Under source code control:   2022/06/20 15:51:49
+ * File existed as early as:    2022
+ *
+ * Share and enjoy!  :-)        http://www.isthe.com/chongo/tech/comp/calc/
+ */
+
+
+static default_group_separator = ",";	/* default 3-digit group separator */
+static default_decimal_separator = ".";	/* default integer-fraction separator */
+
+
+/*
+ * str_comma - convert number into base 10 string with 3-digit groups and integer-fraction separator
+ *
+ *
+ * This function converts a real number into a base 10 string, where
+ * groups of 3 digits are separated by a 3-digit group separator and
+ * a integer-fraction separator is printed between integer and decimal fraction.
+ *
+ * For example:
+ *
+ *	string = str_comma(x);
+ *	string = str_comma(x), " ", ".");
+ *	string = str_comma(x), ".", ",");
+ *
+ * Internally the function calls:
+ *
+ *     strprintf("%f", x);
+ *
+ * and thus the number of decimal fraction digits is subject to
+ * the display() or config("display") value.  See:
+ *
+ *     man display
+ *
+ * for details.
+ *
+ * given:
+ *
+ *	x		number to convert
+ *
+ * optional args:
+ *
+ *	group		use this 3-digit group separator
+ *	decimal		use this integer-fraction separator
+ *
+ * returns:
+ *
+ *	string containing the base 10 digits with group and decimal separators, OR
+ *	null() if x is not a number, OR
+ *	null() if group is neither null() (not given) nor a string, OR
+ *	null() if group is null() (not given) AND default_group_separator is not a string, OR
+ *	null() if decimal is neither null() (not given) nor a string, OR
+ *	null() if decimal is null() (not given) AND default_decimal_separator is not a string.
+ */
+define str_comma(x, group, decimal)
+{
+    local group_separator;	/* 3-digit group separator */
+    local decimal_separator;	/* separator between decimal integer and decimal fraction */
+    local sign_str;		/* leading - if x < 0 or empty if x >= 0 */
+    local integer;		/* integer part of absolute value of x */
+    local int_str;		/* integer as a string */
+    local int_len;		/* number of digits in int_str */
+    local first_group_len;	/* length of 1st group before the 1st 3-digit group separator */
+    local fraction;		/* factional part of absolute value of x */
+    local frac_str;		/* fraction as a string */
+    local frac_len;		/* number of digits in frac_str including leading 0. */
+    local ret;			/* string to return */
+    local config_leadzero;	/* config("leadzero") to restore */
+    local config_tilde;		/* config("tilde") to restore */
+    local i;
+
+    /*
+     * parse args - return null if args are bogus
+     *
+     * Return null() if args or conditions are bogus.
+     */
+    if (!isreal(x)) {
+	return null();
+    }
+    group_separator = isnull(group) ? default_group_separator : group;
+    decimal_separator = isnull(decimal) ? default_decimal_separator : decimal;
+    if (!isstr(group_separator)) {
+	return null();
+    }
+    if (!isstr(decimal_separator)) {
+	return null();
+    }
+
+    /*
+     * split number
+     */
+    if (x < 0) {
+	sign_str = "-";
+	integer = int(-x);
+	fraction = frac(-x);
+    } else {
+	sign_str = "";
+	integer = int(x);
+	fraction = frac(x);
+    }
+    ret = sign_str;
+
+    /*
+     * convert digits
+     *
+     * Avoid printing ~ and leading zeros for factional part.
+     */
+    int_str = strprintf("%d", integer);
+    config_leadzero = config("leadzero", 0);
+    config_tilde = config("tilde", 0);
+    frac_str = strprintf("%d", fraction);
+    config("leadzero", config_leadzero),;
+    config("tilde", config_tilde),;
+
+    /*
+     * determine number of digits in the integer part
+     */
+    int_len = strlen(int_str);
+    frac_len = strlen(frac_str);
+
+    /*
+     * form integer part with group separators as needed
+     */
+
+    /*
+     * case: integer is 3 or fewer digits
+     */
+    if (integer < 1000) {
+	ret += int_str;
+
+    /*
+     * case: integer is 4 or more digits
+     */
+    } else {
+
+	/*
+	 * form a decimal string using group separators
+	 */
+
+	/*
+	 * form the initial leading digits before 1st group separator
+	 */
+	first_group_len = int_len % 3;
+	if (first_group_len == 0) {
+	    first_group_len = 3;
+	}
+	ret += substr(int_str, 1, first_group_len);
+
+	/*
+	 * until end of digits, print group separator followed by 3 more digits
+	 */
+	for (i = first_group_len+1; i < int_len; i += 3) {
+	    ret += group_separator + substr(int_str, i, 3);
+	}
+    }
+
+    /*
+     * form fractional part using decimal separator as needed
+     */
+
+    /*
+     * case: x is an integer
+     */
+    if (fraction == 0) {
+
+	/* no fraction, nothing more to do */
+
+    /*
+     * case: x is not an integer
+     */
+    } else {
+
+	/*
+	 * add integer-fraction separator
+	 */
+	ret += decimal_separator;
+
+	/*
+	 * add remaining digits
+	 *
+	 * Skip over the leading 0. in frac_str
+	 */
+	ret += substr(frac_str, 2, frac_len-1);
+    }
+
+    /*
+     * All Done!!! -- Jessica Noll, Age 2
+     */
+    return ret;
+}
+
+
+/*
+ * set_default_group_separator - change the default 3-digit group separator
+ *
+ * If group is not a string, then the default 3-digit group separator
+ * is not changed.  Thus, this will only return the default 3-digit group separator:
+ *
+ *	set_default_group_separator(null());
+ *
+ * given:
+ *
+ *	group		3-digit group separator
+ *
+ * returns:
+ *
+ *	previous 3-digit group separator value
+ */
+define set_default_group_separator(group)
+{
+    local old_default_group_separator;		/* previous default 3-digit group separator to return */
+
+    /*
+     * save current 3-digit group separator
+     */
+    old_default_group_separator = default_group_separator;
+
+    /*
+     * change 3-digit group separator if group is a string
+     */
+    if (isstr(group)) {
+	default_group_separator = group;
+    }
+    return old_default_group_separator;
+}
+
+
+/*
+ * set_default_decimal_separator - change the default integer-fraction separator
+ *
+ * If decimal is not a string, then the default integer-fraction separator
+ * is not changed.  Thus, this will only return the integer-fraction separator:
+ *
+ *	set_default_decimal_separator(null());
+ *
+ * given:
+ *
+ *	decimal		separator between decimal integer and decimal fraction (def: ".")
+ *
+ * returns:
+ *
+ *	previous integer-fraction separator value
+ */
+define set_default_decimal_separator(decimal)
+{
+    local old_default_decimal_separator;	/* previous default integer-fraction separator */
+
+    /*
+     * save current integer-fraction separator
+     */
+    old_default_decimal_separator = default_decimal_separator;
+
+    /*
+     * change 3-digit decimal integer-fraction if decimal is a string
+     */
+    if (isstr(decimal)) {
+	default_decimal_separator = decimal;
+    }
+    return old_default_decimal_separator;
+}
+
+
+/*
+ * print_comma - print base 10 string with 3-digit group separators & integer-fraction separator + newline
+ *
+ * This function prints the result of str_comma(x, group, decimal) followed by a newline.
+ * For example:
+ *
+ *	print_comma(x);
+ *	print_comma(x), " ", ".");
+ *	print_comma(x), ".", ",");
+ *
+ * If str_comma() does not return a string, this function prints nothing.
+ *
+ * NOTE: To print without a newline, use fprint_comma(fd, x, group, decimal).
+ *
+ * given:
+ *	x		number to convert
+ *
+ * optional args:
+ *
+ *	group		use this 3-digit group separator
+ *	decimal		use this integer-fraction separator
+ *
+ * returns:
+ *
+ *	string containing the base 10 digits with group and decimal separators, OR
+ *	null() if x is not a number, OR
+ *	null() if group is neither null() (not given) nor a string, OR
+ *	null() if group is null() (not given) AND default_group_separator is not a string, OR
+ *	null() if decimal is neither null() (not given) nor a string, OR
+ *	null() if decimal is null() (not given) AND default_decimal_separator is not a string.
+ */
+define print_comma(x, group, decimal)
+{
+    local ret;		/* base 10 string with 3-digit group and integer-fraction separators */
+
+    /*
+     * convert to string
+     */
+    ret = str_comma(x, group, decimal);
+
+    /*
+     * print converted string
+     */
+    if (isstr(ret)) {
+	printf("%s\n", ret);
+    }
+    return ret;
+}
+
+
+/*
+ * fprint_comma - print base 10 string with 3-digit group separators & integer-fraction separator w/o newline
+ *
+ * This function prints the result of str_comma(x, group, decimal) on an open file, without a trailing newline.
+ * For example:
+ *
+ *	fprint_comma(files(1), x);
+ *	fprint_comma(fd, x), " ", ".");
+ *	fprint_comma(files(2), x), ".", ",");
+ *
+ * If str_comma() does not return a string, this function prints nothing.
+ *
+ * This function flushes output to the open file before returning.
+ *
+ * NOTE: To print with a newline, use print_comma(x, group, decimal).
+ *
+ * given:
+ *	fd		open file
+ *	x		number to convert
+ *
+ * optional args:
+ *
+ *	group		use this 3-digit group separator
+ *	decimal		use this integer-fraction separator
+ *
+ * returns:
+ *
+ *	string containing the base 10 digits with group and integer-fraction separators, OR
+ *	null() if x is not a number, OR
+ *	null() if group is neither null() (not given) nor a string, OR
+ *	null() if group is null() (not given) AND default_group_separator is not a string, OR
+ *	null() if decimal is neither null() (not given) nor a string, OR
+ *	null() if decimal is null() (not given) AND default_decimal_separator is not a string.
+ */
+define fprint_comma(fd, x, group, decimal)
+{
+    local ret;		/* base 10 string with 3-digit group and integer-fraction separators */
+
+    /*
+     * convert to string
+     */
+    ret = str_comma(x, group, decimal);
+
+    /*
+     * print converted string
+     */
+    if (isstr(ret) && isfile(fd)) {
+	fprintf(fd, "%s", ret);
+	fflush(fd);
+    }
+    return ret;
+}
diff -pur calc-2.14.1.0.orig/cal/Makefile calc/cal/Makefile
--- calc-2.14.1.0.orig/cal/Makefile	2022-01-22 09:00:08.000000000 +0100
+++ calc/cal/Makefile	2022-11-01 20:25:25.259297900 +0100
@@ -267,9 +267,9 @@ TRUE= true
 #
 CALC_FILES= README alg_config.cal beer.cal bernoulli.cal \
 	bernpoly.cal bigprime.cal bindings brentsolve.cal chi.cal chrem.cal \
-	constants.cal deg.cal dms.cal dotest.cal ellip.cal factorial.cal \
-	factorial2.cal gvec.cal hello.cal hms.cal infinities.cal intfile.cal \
-	intnum.cal lambertw.cal linear.cal lnseries.cal lucas.cal \
+	comma.cal constants.cal deg.cal dms.cal dotest.cal ellip.cal \
+	factorial.cal factorial2.cal gvec.cal hello.cal hms.cal infinities.cal \
+	intfile.cal intnum.cal lambertw.cal linear.cal lnseries.cal lucas.cal \
 	lucas_chk.cal mersenne.cal mfactor.cal mod.cal natnumset.cal \
 	palindrome.cal pell.cal pi.cal pix.cal pollard.cal poly.cal prompt.cal \
 	psqrt.cal qtime.cal quat.cal randbitrun.cal randmprime.cal \
diff -pur calc-2.14.1.0.orig/cal/README calc/cal/README
--- calc-2.14.1.0.orig/cal/README	2021-12-06 08:03:23.000000000 +0100
+++ calc/cal/README	2022-11-01 20:25:25.259297900 +0100
@@ -263,6 +263,64 @@ chrem.cal
     Chinese remainder theorem/problem solver.
 
 
+comma.cal
+
+    Convert numbers into strings with 3-digit group and integer-fraction
+    separators.
+
+    If the value is an integer, the integer-fraction separator is not used.
+
+    str_comma(x, [group, [decimal]])
+
+	Convert x into a string.
+
+	If group is given and is a string, group will be used as
+	the 3-digit group separator, otherwise the default 3-digit
+	group separator will be used.
+
+	If decimal is given and is a string, group will be used as
+	the integer-fraction separator, otherwise the default
+	integer-fraction separator will be used.
+
+	The decimal and group arguments are optional.
+
+    set_default_group_separator(group)
+
+	Change the default 3-digit group separator if group is a string,
+	otherwise the default 3-digit group separator will not be
+	changed.  Return the old 3-digit group separator.
+
+    set_default_decimal_separator(decimal)
+
+	Change the default 3-digit group separator if decimal is a
+	string, otherwise the default integer-fraction separator
+	will not be changed.  Return the old integer-fraction separator.
+
+    print_comma(x, [group, [decimal]])
+
+	Print the value produced by str_comma(x, [group, [decimal]])
+	followed by a newline.
+
+	If the str_comma() does not return a string, nothing is printed.
+
+	The decimal and group arguments are optional.
+
+	The value produced by str_comma() is returned.
+
+    fprint_comma(fd, x, [group, [decimal]])
+
+	Print the value produced by str_comma(x, [group, [decimal]]),
+	without a trailing newline, on file fd.
+
+	If the str_comma() does not return a string, nothing is printed.
+
+	If fd is not an open file, nothing is printed.
+
+	The decimal and group arguments are optional.
+
+	The value produced by str_comma() is returned.
+
+
 deg.cal
 
     deg(deg, min, sec)
diff -pur calc-2.14.1.0.orig/calc.man calc/calc.man
--- calc-2.14.1.0.orig/calc.man	2021-12-06 08:03:23.000000000 +0100
+++ calc/calc.man	2022-11-01 20:25:25.730336600 +0100
@@ -596,7 +596,7 @@ may have to be replaced by:
 .sp 1
 .in +5n
 .nf
-print 27! ^2	or	print 27\!^2
+print 27! ^2	or	print 27\\!^2
 .fi
 .in -5n
 
diff -pur calc-2.14.1.0.orig/CHANGES calc/CHANGES
--- calc-2.14.1.0.orig/CHANGES	2022-04-08 08:53:04.000000000 +0200
+++ calc/CHANGES	2022-11-01 20:25:25.070858300 +0100
@@ -6,6 +6,65 @@ The following are the changes from calc
     Adjusted cal/test8900.cal to reflect this bug fix.
     Added tests to cal/regress.cal to help verify bug fix is fixed.
 
+    Fixed a \-escape bug in calc(1) man page.
+
+    Added cal/comma.cal:
+
+	Convert numbers into strings with 3-digit group and integer-fraction
+	separators.
+
+	If the value is an integer, the integer-fraction separator is not used.
+
+	str_comma(x, [group, [decimal]])
+
+	    Convert x into a string.
+
+	    If group is given and is a string, group will be used as
+	    the 3-digit group separator, otherwise the default 3-digit
+	    group separator will be used.
+
+	    If decimal is given and is a string, group will be used as
+	    the integer-fraction separator, otherwise the default
+	    integer-fraction separator will be used.
+
+	    The decimal and group arguments are optional.
+
+	set_default_group_separator(group)
+
+	    Change the default 3-digit group separator if group is a string,
+	    otherwise the default 3-digit group separator will not be
+	    changed.  Return the old 3-digit group separator.
+
+	set_default_decimal_separator(decimal)
+
+	    Change the default 3-digit group separator if decimal is a
+	    string, otherwise the default integer-fraction separator
+	    will not be changed.  Return the old integer-fraction separator.
+
+	print_comma(x, [group, [decimal]])
+
+	    Print the value produced by str_comma(x, [group, [decimal]])
+	    followed by a newline.
+
+	    If the str_comma() does not return a string, nothing is printed.
+
+	    The decimal and group arguments are optional.
+
+	    The value produced by str_comma() is returned.
+
+	fprint_comma(fd, x, [group, [decimal]])
+
+	    Print the value produced by str_comma(x, [group, [decimal]]),
+	    without a trailing newline, on file fd.
+
+	    If the str_comma() does not return a string, nothing is printed.
+
+	    If fd is not an open file, nothing is printed.
+
+	    The decimal and group arguments are optional.
+
+	    The value produced by str_comma() is returned.
+
 
 The following are the changes from calc version 2.14.0.15 to 2.14.0.15:
 
diff -pur calc-2.14.1.0.orig/CODE_OF_CONDUCT.md calc/CODE_OF_CONDUCT.md
--- calc-2.14.1.0.orig/CODE_OF_CONDUCT.md	1970-01-01 01:00:00.000000000 +0100
+++ calc/CODE_OF_CONDUCT.md	2022-11-01 20:25:25.086479800 +0100
@@ -0,0 +1,128 @@
+# Contributor Covenant Code of Conduct
+
+## Our Pledge
+
+We as members, contributors, and leaders pledge to make participation in our
+community a harassment-free experience for everyone, regardless of age, body
+size, visible or invisible disability, ethnicity, sex characteristics, gender
+identity and expression, level of experience, education, socio-economic status,
+nationality, personal appearance, race, religion, or sexual identity
+and orientation.
+
+We pledge to act and interact in ways that contribute to an open, welcoming,
+diverse, inclusive, and healthy community.
+
+## Our Standards
+
+Examples of behavior that contributes to a positive environment for our
+community include:
+
+* Demonstrating empathy and kindness toward other people
+* Being respectful of differing opinions, viewpoints, and experiences
+* Giving and gracefully accepting constructive feedback
+* Accepting responsibility and apologizing to those affected by our mistakes,
+  and learning from the experience
+* Focusing on what is best not just for us as individuals, but for the
+  overall community
+
+Examples of unacceptable behavior include:
+
+* The use of sexualized language or imagery, and sexual attention or
+  advances of any kind
+* Trolling, insulting or derogatory comments, and personal or political attacks
+* Public or private harassment
+* Publishing others' private information, such as a physical or email
+  address, without their explicit permission
+* Other conduct which could reasonably be considered inappropriate in a
+  professional setting
+
+## Enforcement Responsibilities
+
+Community leaders are responsible for clarifying and enforcing our standards of
+acceptable behavior and will take appropriate and fair corrective action in
+response to any behavior that they deem inappropriate, threatening, offensive,
+or harmful.
+
+Community leaders have the right and responsibility to remove, edit, or reject
+comments, commits, code, wiki edits, issues, and other contributions that are
+not aligned to this Code of Conduct, and will communicate reasons for moderation
+decisions when appropriate.
+
+## Scope
+
+This Code of Conduct applies within all community spaces, and also applies when
+an individual is officially representing the community in public spaces.
+Examples of representing our community include using an official e-mail address,
+posting via an official social media account, or acting as an appointed
+representative at an online or offline event.
+
+## Enforcement
+
+Instances of abusive, harassing, or otherwise unacceptable behavior may be
+reported to the community leaders responsible for enforcement at
+https://github.com/lcn2/calc/blob/master/QUESTIONS.
+All complaints will be reviewed and investigated promptly and fairly.
+
+All community leaders are obligated to respect the privacy and security of the
+reporter of any incident.
+
+## Enforcement Guidelines
+
+Community leaders will follow these Community Impact Guidelines in determining
+the consequences for any action they deem in violation of this Code of Conduct:
+
+### 1. Correction
+
+**Community Impact**: Use of inappropriate language or other behavior deemed
+unprofessional or unwelcome in the community.
+
+**Consequence**: A private, written warning from community leaders, providing
+clarity around the nature of the violation and an explanation of why the
+behavior was inappropriate. A public apology may be requested.
+
+### 2. Warning
+
+**Community Impact**: A violation through a single incident or series
+of actions.
+
+**Consequence**: A warning with consequences for continued behavior. No
+interaction with the people involved, including unsolicited interaction with
+those enforcing the Code of Conduct, for a specified period of time. This
+includes avoiding interactions in community spaces as well as external channels
+like social media. Violating these terms may lead to a temporary or
+permanent ban.
+
+### 3. Temporary Ban
+
+**Community Impact**: A serious violation of community standards, including
+sustained inappropriate behavior.
+
+**Consequence**: A temporary ban from any sort of interaction or public
+communication with the community for a specified period of time. No public or
+private interaction with the people involved, including unsolicited interaction
+with those enforcing the Code of Conduct, is allowed during this period.
+Violating these terms may lead to a permanent ban.
+
+### 4. Permanent Ban
+
+**Community Impact**: Demonstrating a pattern of violation of community
+standards, including sustained inappropriate behavior,  harassment of an
+individual, or aggression toward or disparagement of classes of individuals.
+
+**Consequence**: A permanent ban from any sort of public interaction within
+the community.
+
+## Attribution
+
+This Code of Conduct is adapted from the [Contributor Covenant][homepage],
+version 2.0, available at
+https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.
+
+Community Impact Guidelines were inspired by [Mozilla's code of conduct
+enforcement ladder](https://github.com/mozilla/diversity).
+
+[homepage]: https://www.contributor-covenant.org
+
+For answers to common questions about this code of conduct, see the FAQ at
+https://www.contributor-covenant.org/faq. Translations are available at
+https://www.contributor-covenant.org/translations.
diff -pur calc-2.14.1.0.orig/CONTRIBUTING.md calc/CONTRIBUTING.md
--- calc-2.14.1.0.orig/CONTRIBUTING.md	1970-01-01 01:00:00.000000000 +0100
+++ calc/CONTRIBUTING.md	2022-11-01 20:25:25.094487500 +0100
@@ -0,0 +1,7 @@
+# How to contribue code to calc
+
+## CONTRIB-CODE
+
+See the file
+<A HREF="https://github.com/lcn2/calc/blob/master/CONTRIB-CODE">CONTRIB-CODE</A>
+for how to contribue code to calc.
diff -pur calc-2.14.1.0.orig/SECURITY.md calc/SECURITY.md
--- calc-2.14.1.0.orig/SECURITY.md	1970-01-01 01:00:00.000000000 +0100
+++ calc/SECURITY.md	2022-11-01 20:25:25.180675600 +0100
@@ -0,0 +1,19 @@
+# Security Policy
+
+## Supported Versions
+
+The most recent version of calc is supported with security updates.
+
+If the most recent stable of calc is also supported with security updates.
+
+FYI: please review the BUGS file, or enter the calc command:
+
+    ; help BUGS
+
+## Reporting a Vulnerability
+
+Please create a calc GitHub repo issue:
+
+    https://github.com/lcn2/calc/issues
+
+Click on ((New issue)) and follow the issue template.

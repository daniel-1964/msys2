diff -purN cntlm-0.92.3/direct.c cntlm-0.92.3-1/direct.c
--- cntlm-0.92.3/direct.c	2011-11-28 14:55:15.000000000 +0100
+++ cntlm-0.92.3-1/direct.c	2012-12-17 11:07:17.383047900 +0100
@@ -282,8 +282,19 @@ rr_data_t direct_request(void *cdata, rr
 					data[0]->url = strdup(data[0]->rel_url);
 				}
 
-				data[0]->headers = hlist_mod(data[0]->headers, "Connection", "keep-alive", 1);
-				data[0]->headers = hlist_del(data[0]->headers, "Proxy-Authorization");
+				/*
+				 * Force proxy keep-alive if the client can handle it (HTTP >= 1.1)
+				 */
+				if (data[0]->http_version >= 11)
+					data[0]->headers = hlist_mod(data[0]->headers, "Connection", "keep-alive", 1);
+
+				/*
+				 * Also remove runaway P-A from the client (e.g. Basic from N-t-B), which might 
+				 * cause some ISAs to deny us, even if the connection is already auth'd.
+				 */
+				while (hlist_get(data[loop]->headers, "Proxy-Authorization")) {
+					data[loop]->headers = hlist_del(data[loop]->headers, "Proxy-Authorization");
+				}
 
 				/*
 				 * Try to get auth from client if present
@@ -373,18 +384,25 @@ rr_data_t direct_request(void *cdata, rr
 			 */
 			if (loop == 1) {
 				conn_alive = !hlist_subcmp(data[1]->headers, "Connection", "close")
-					&& http_has_body(data[0], data[1]) != -1;
+					&& http_has_body(data[0], data[1]) != -1
+					&& data[0]->http_version >= 11;
 				if (conn_alive) {
 					data[1]->headers = hlist_mod(data[1]->headers, "Proxy-Connection", "keep-alive", 1);
 					data[1]->headers = hlist_mod(data[1]->headers, "Connection", "keep-alive", 1);
 				} else {
 					data[1]->headers = hlist_mod(data[1]->headers, "Proxy-Connection", "close", 1);
+					data[1]->headers = hlist_mod(data[1]->headers, "Connection", "close", 1);
 					rc = (void *)-1;
 				}
 			}
 
-			if (debug)
+			if (debug) {
 				printf("Sending headers (%d)...\n", *wsocket[loop]);
+				if (loop == 0) {
+					printf("HEAD: %s %s %s\n", data[loop]->method, data[loop]->url, data[loop]->http);
+					hlist_dump(data[loop]->headers);
+				}
+			}
 
 			/*
 			 * Send headers
diff -purN cntlm-0.92.3/doc/cntlm.1 cntlm-0.92.3-1/doc/cntlm.1
--- cntlm-0.92.3/doc/cntlm.1	2012-02-08 16:28:25.000000000 +0100
+++ cntlm-0.92.3-1/doc/cntlm.1	2012-12-17 11:07:17.398672900 +0100
@@ -124,7 +124,7 @@ username in the password dialog: "domain
 .B -c <filename>
 Configuration file. Command-line options, if used, override its single options or are added at the top of the
 list for multi options (tunnels, parent proxies, etc) with the exception of ACLs, which are completely
-overriden. Use \fI/dev/null\fP to disable any config file.
+overridden. Use \fI/dev/null\fP to disable any config file.
 
 .TP
 .B -D IP/mask\ \ \ \ (Deny)
@@ -191,7 +191,7 @@ password prompt is issued. Use this opti
 .TP
 .B -L [<saddr>:]<lport>:<rhost>:<rport>\ \ \ \ (Tunnel)
 Tunnel definition. The syntax is the same as in OpenSSH's local forwarding (\fB-L\fP), with a new optional
-prefix, \fIsaddr\fP - the source IP address to bind the \fIlport\fP to. \fBCntlm\fP will listen for incomming
+prefix, \fIsaddr\fP - the source IP address to bind the \fIlport\fP to. \fBCntlm\fP will listen for incoming
 connections on the local port \fIlport\fP, forwarding every new connection through the parent proxy to the
 \fIrhost\fP:\fIrport\fP (authenticating on the go). This option can be used multiple times for unlimited
 number of tunnels, with or without the \fIsaddr\fP option. See \fB-g\fP for the details concerning local port
diff -purN cntlm-0.92.3/forward.c cntlm-0.92.3-1/forward.c
--- cntlm-0.92.3/forward.c	2012-03-02 01:15:03.000000000 +0100
+++ cntlm-0.92.3-1/forward.c	2012-12-17 11:07:17.367422900 +0100
@@ -446,7 +446,9 @@ beginning:
 					&& strcasecmp(hostname, data[0]->hostname)) {
 				if (debug)
 					printf("\n******* F RETURN: %s *******\n", data[0]->url);
-				if (authok)
+				if (authok && data[0]->http_version >= 11
+						&& (hlist_subcmp(data[0]->headers, "Proxy-Connection", "keep-alive")
+							|| hlist_subcmp(data[0]->headers, "Connection", "keep-alive")))
 					proxy_alive = 1;
 
 				rc = dup_rr_data(data[0]);
@@ -465,7 +467,7 @@ shortcut:
 			/*
 			 * Modify request headers.
 			 *
-			 * Try to request keep-alive for every connection. We keep them in a pool
+			 * Try to request keep-alive for every client supporting HTTP/1.1+. We keep them in a pool
 			 * for future reuse.
 			 */
 			if (loop == 0 && data[0]->req) {
@@ -499,13 +501,14 @@ shortcut:
 				}
 
 				/*
-				 * Also remove runaway P-A from the client (e.g. Basic from N-t-B), which might 
-				 * cause some ISAs to deny us, even if the connection is already auth'd.
+				 * Force proxy keep-alive if the client can handle it (HTTP >= 1.1)
 				 */
-				data[0]->headers = hlist_mod(data[0]->headers, "Proxy-Connection", "keep-alive", 1);
+				if (data[0]->http_version >= 11)
+					data[0]->headers = hlist_mod(data[0]->headers, "Proxy-Connection", "keep-alive", 1);
 
 				/*
-				 * Remove all Proxy-Authorization headers from client
+				 * Also remove runaway P-A from the client (e.g. Basic from N-t-B), which might 
+				 * cause some ISAs to deny us, even if the connection is already auth'd.
 				 */
 				while (hlist_get(data[loop]->headers, "Proxy-Authorization")) {
 					data[loop]->headers = hlist_del(data[loop]->headers, "Proxy-Authorization");
@@ -672,8 +675,14 @@ shortcut:
 			 * This way, we also tell our caller that proxy keep-alive is impossible.
 			 */
 			if (loop == 1) {
-				proxy_alive = hlist_subcmp(data[loop]->headers, "Proxy-Connection", "keep-alive");
-				if (!proxy_alive) {
+				proxy_alive = hlist_subcmp(data[1]->headers, "Proxy-Connection", "keep-alive")
+					&& data[0]->http_version >= 11;
+				if (proxy_alive) {
+					data[1]->headers = hlist_mod(data[1]->headers, "Proxy-Connection", "keep-alive", 1);
+					data[1]->headers = hlist_mod(data[1]->headers, "Connection", "keep-alive", 1);
+				} else {
+					data[1]->headers = hlist_mod(data[1]->headers, "Proxy-Connection", "close", 1);
+					data[1]->headers = hlist_mod(data[1]->headers, "Connection", "close", 1);
 					if (debug)
 						printf("PROXY CLOSING CONNECTION\n");
 					rc = (void *)-1;
diff -purN cntlm-0.92.3/http.c cntlm-0.92.3-1/http.c
--- cntlm-0.92.3/http.c	2011-12-10 18:26:43.000000000 +0100
+++ cntlm-0.92.3-1/http.c	2012-12-17 11:07:17.336172900 +0100
@@ -84,7 +84,7 @@ char *get_http_header_value(const char *
  */
 int headers_recv(int fd, rr_data_t data) {
 	int i, bsize;
-	int len;
+	int len, is_http = 0;
 	char *buf;
 	char *tok, *s3 = 0;
 	char *orig = NULL;
@@ -108,12 +108,22 @@ int headers_recv(int fd, rr_data_t data)
 	orig = strdup(buf);
 	len = strlen(buf);
 	tok = strtok_r(buf, " ", &s3);
-	if (tok && (!strncasecmp(buf, "HTTP/", 5) || !strncasecmp(tok, "ICY", 3))) {
+	if (tok && ((is_http = !strncasecmp(tok, "HTTP/", 5)) || !strncasecmp(tok, "ICY", 3))) {
 		data->req = 0;
 		data->empty = 0;
 		data->http = strdup(tok);
 		data->msg = NULL;
 
+		/*
+		 * Let's find out the numeric version of the HTTP version: 09, 10, 11.
+		 * Set to -1 if header is misformatted.
+		 */
+		if (is_http && (tok = strchr(data->http, '/')) && strlen(tok) >= 4 && isdigit(tok[1]) && isdigit(tok[3])) {
+			data->http_version = (tok[1] - 0x30) * 10 + (tok[3] - 0x30);
+		} else {
+			data->http_version = -1;
+		}
+
 		tok = strtok_r(NULL, " ", &s3);
 		if (tok) {
 			ccode = strdup(tok);
@@ -156,6 +166,16 @@ int headers_recv(int fd, rr_data_t data)
 			goto bailout;
 		}
 
+		/*
+		 * Let's find out the numeric version of the HTTP version: 09, 10, 11.
+		 * Set to -1 if header is misformatted.
+		 */
+		if ((tok = strchr(data->http, '/')) && strlen(tok) >= 4 && isdigit(tok[1]) && isdigit(tok[3])) {
+			data->http_version = (tok[1] - 0x30) * 10 + (tok[3] - 0x30);
+		} else {
+			data->http_version = -1;
+		}
+
 		if ((tok = strstr(data->url, "://"))) {
 			tok += 3;
 		} else {
diff -purN cntlm-0.92.3/main.c cntlm-0.92.3-1/main.c
--- cntlm-0.92.3/main.c	2012-03-02 01:11:22.000000000 +0100
+++ cntlm-0.92.3-1/main.c	2012-12-17 12:37:24.244342900 +0100
@@ -948,7 +948,7 @@ int main(int argc, char **argv) {
 	 */
 #ifdef SYSCONFDIR
 	if (!cf) {
-#ifdef __CYGWIN__
+#if 0 // disabled for a pure cygwin port #ifdef __CYGWIN__
 		tmp = getenv("PROGRAMFILES(X86)");
 		if (tmp == NULL || strlen(tmp) == 0)
 			tmp = getenv("PROGRAMFILES");
diff -purN cntlm-0.92.3/utils.c cntlm-0.92.3-1/utils.c
--- cntlm-0.92.3/utils.c	2011-11-28 14:55:15.000000000 +0100
+++ cntlm-0.92.3-1/utils.c	2012-12-17 11:07:17.320547900 +0100
@@ -508,6 +508,7 @@ rr_data_t new_rr_data(void) {
 	data->body_len = 0;
 	data->empty = 1;
 	data->port = 0;
+	data->http_version = -1;
 	data->headers = NULL;
 	data->method = NULL;
 	data->url = NULL;
@@ -535,6 +536,7 @@ rr_data_t copy_rr_data(rr_data_t dst, rr
 	dst->body_len = src->body_len;
 	dst->empty = src->empty;
 	dst->port = src->port;
+	dst->http_version = src->http_version;
 
 	if (src->headers)
 		dst->headers = hlist_dup(src->headers);
@@ -584,6 +586,7 @@ rr_data_t reset_rr_data(rr_data_t data)
 	data->body_len = 0;
 	data->empty = 1;
 	data->port = 0;
+	data->http_version = -1;
 
 	if (data->headers) hlist_free(data->headers);
 	if (data->method) free(data->method);
@@ -623,6 +626,7 @@ void free_rr_data(rr_data_t data) {
 	if (data->http) free(data->http);
 	if (data->msg) free(data->msg);
 	if (data->body) free(data->body);
+	memset(data, 0, sizeof(struct rr_data_s));
 	free(data);
 }
 
diff -purN cntlm-0.92.3/utils.h cntlm-0.92.3-1/utils.h
--- cntlm-0.92.3/utils.h	2011-10-14 13:45:26.000000000 +0200
+++ cntlm-0.92.3-1/utils.h	2012-12-17 11:07:17.351797900 +0100
@@ -89,6 +89,7 @@ struct rr_data_s {
 	int body_len;
 	int empty;
 	int port;
+	int http_version;
 	char *method;
 	char *url;
 	char *rel_url;
